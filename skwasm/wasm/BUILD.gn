import("//build/toolchain/wasm.gni")

wasm_lib("skwasm") {
  sources = [
    "canvas.cpp",
    "export.h",
    "helpers.h",
    "paint.cpp",
    "path.cpp",
    "picture.cpp",
    "surface.cpp",
    "wrappers.h",
  ]

  ldflags = [
    "-std=c++20",
    "-lGL",
    "-sUSE_WEBGL2=1",
    "-sMAX_WEBGL_VERSION=2",
    "-sOFFSCREENCANVAS_SUPPORT",
    "-sPTHREAD_POOL_SIZE=1",
    "-sALLOW_MEMORY_GROWTH",
    "-sUSE_PTHREADS=1",
  ]

  cflags = [ "-pthread" ]

  if (is_debug) {
    ldflags += [
      "-O0",
      "-sDEMANGLE_SUPPORT=1",
      "-sASSERTIONS=1",
      "-sGL_ASSERTIONS=1",
      "-g3",
    ]
  } else {
    ldflags += [
      "-O1",
      "--closure=0",
      "-flto",
      "-sEXPORTED_FUNCTIONS=[stackAlloc]",
    ]

    cflags += [
      "-flto",
      "-fvisibility=hidden",
    ]
  }

  extra_outputs = [ "$root_out_dir/skwasm.worker.js" ]

  deps = [
    "//third_party/skia",
    "//third_party/skia/modules/canvaskit:create_notomono_cpp",
  ]
}

copy("copy_skwasm") {
  skwasm_target = ":skwasm(//build/toolchain/wasm)"

  deps = [ skwasm_target ]

  skwasm_out_dir = get_label_info(skwasm_target, "root_out_dir")

  sources = [
    "$skwasm_out_dir/skwasm.js",
    "$skwasm_out_dir/skwasm.wasm",
    "$skwasm_out_dir/skwasm.worker.js",
  ]

  outputs = [ "$root_out_dir/skwasm/{{source_file_part}}" ]
}
